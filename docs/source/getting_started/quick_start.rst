Quick Start
===================

The XOA Driver offers more than just object-oriented APIs and functions for executing test scripts. It also provides a seamless integration with `XOA CLI commands <https://docs.xenanetworks.com/projects/tdl-xoa-cli>`_ and port configuration files from XenaManager, enabling you to effortlessly work with them.

Basic Example
-----------------------------

The simple code example demonstrates some basics of using :term:`HL-API` and :term:`HL-FUNC`:

1. Connect to a tester
2. Reserve a port as TX and another one as RX
3. Configure TX port
4. Configure a stream on the TX port
5. Start traffic on the TX port
6. Wait for 10 seconds
7. Collect statistics on the TX port
8. Collect statistics on the RX port
9. Release the ports
10. Disconnect from the chassis

We will first walk you through step-by-step covering the topics above. At the end, you will see the whole example. If you want to try it out, you can simply copy and paste it into your environment and run. Remember to change the IP address to your tester.

This is boilerplate. 

.. literalinclude:: quick_start.py
    :language: python
    :lines: 19-39, 231-244

To establish a connection to a tester is simple. 

.. literalinclude:: quick_start.py
    :language: python
    :lines: 49-51

Access module on the tester. The method ``obtain()`` is for accessing a test resource that cannot be deleted, such as a module or a port. You can read more about this method in :ref:`Module Manager and Port Manager <obtain-label>`.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 61-62

After that, the driver knows you are using the desired module, and then you can access ports on the module. Let's use two ports, one as TX, the other RX.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 69-79

Now we have two ports ready to configure. Let's first configure the TX port.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 81-99

The ``await utils.apply()`` lets us group several commands bound for the same port into a larger "command". This is called :doc:`Sequential Grouping </command_grouping>`.

.. note::

    After reset, the attributes of the port are set to default values. You can use the ``get()`` medthod to query the default values.

    You don't necessarily need to set all the attributes. The default values are usually good enough for most tests. Just pick the ones you need to set.

Now we can create a stream on the TX port.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 100-137

Then, we want to clear the statistics counters of both TX and RX ports before starting the traffic. This is to make sure the counters are not polluted by any previous test.
We can use :doc:`Parallel Grouping </command_grouping>` to group commands bound for different ports into a larger "command".

.. literalinclude:: quick_start.py
    :language: python
    :lines: 139-149

Now, let's start the traffic on the TX port for roughly 10 seconds and stop. It is "*roughly*" because we use ``sleep()`` to control the duration. It may feel accurate to you but for a Xena tester that can generate 800Gbps traffic with time measurement to nanosecond range, ``sleep()`` is far from accurate in terms of time controlling. If your test requires high-accuracy time control, don't use software to control time. Instead, limit the port's TX time so that you can have down to microsecond-range traffic duration.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 151-161

After the traffic is stopped, we query statistic counters.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 163-222

At last, release the ports as a good practice, so your team members know the ports are free to use.

.. literalinclude:: quick_start.py
    :language: python
    :lines: 22-228

**The entire example is here.**

.. literalinclude:: quick_start.py
    :language: python
    :caption: Quick Start Example


Integrate with CLI and XenaManager
--------------------------------------

The simple code example demonstrates how to use XOA Driver :

* Establish connection to a Xena tester.
* Reserve a port.
* Port configuration from `.xpc` file
* Port configuration from CLI commands
* Module configuration from file
* Module configuration from CLI commands
* Chassis configuration from file
* Chassis configuration from CLI commands

We will first walk you through step-by-step covering the topics above. At the end, you will see the whole example. If you want to try it out, you can simply copy and paste it into your environment and run. Remember to change the IP address to your tester's.

This is boilerplate. 

.. literalinclude:: cli_integration.py
    :language: python
    :lines: 22-48, 140-152

You can use :guilabel:`Save Port Configuration` in XenaManager to download port configuration files, which contain CLI commands inside. To "upload" the port configuration file generated by XenaManager, simply do:

.. literalinclude:: cli_integration.py
    :language: python
    :lines: 122-125

In addition to set port configuration from an `xpc` file, you can also send CLI commands using XOA Driver. 

.. literalinclude:: cli_integration.py
    :language: python
    :lines: 126-135

You can set module or chassis configuration in the same way, either from a file or from command strings.

.. literalinclude:: cli_integration.py
    :language: python
    :lines: 66-84, 86-108

**The entire example is here.**

.. literalinclude:: cli_integration.py
    :language: python
    :caption: XOA-CLI Integration Example
